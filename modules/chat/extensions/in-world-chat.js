// Alter starting html
// HTML Structure generated by ChatGPT, edited

// Add tab buttons
let tabDiv = document.createElement("div");
tabDiv.setAttribute("class", "tab-container");
tabDiv.innerHTML = `<button class="tab-button active" onclick="openTab('playerChat')">Player chat</button><button class="tab-button" onclick="openTab('inWorldChat')">In-world chat</button>`
/*
    <div class="tab-container">
        <button class="tab-button active" onclick="openTab('playerChat')">Player chat</button>
        <button class="tab-button" onclick="openTab('inWorldChat')">In-world chat</button>
    </div>
*/
document.body.insertBefore(tabDiv, document.getElementById("playerChat"));

// Add in-world chat divs
let chatTabDiv = document.createElement("div");
chatTabDiv.id = "inWorldChat";
chatTabDiv.setAttribute("class", "tab-content");
chatTabDiv.style = "display:none;"
chatTabDiv.innerHTML = '<div class="chat-container"><div class="chat-messages" id="inWorldChatMessages"></div></div><div class="chat-input-container"><textarea id="inWorldChatInput" class="chat-input" placeholder="Type your message..."></textarea><div class="dropdown-and-button"><select id="characterSelect" class="character-select"><option value="character1">Character 1</option><option value="character2">Character 2</option><option value="Fred">Fred</option></select><button class="send-button" onclick="inWorldChat.send()">Send</button></div></div>'
/*
    <div class="tab-content" id="inWorldChat" style="display:none;"">
        <div class="chat-container">
            <div class="chat-messages" id="inWorldChatMessages"></div>
        </div>
        <div class="chat-input-container">
            <textarea id="inWorldChatInput" class="chat-input" placeholder="Type your message..."></textarea>
            <div class="dropdown-and-button">
                <select id="characterSelect" class="character-select">
                    <option value="character1">Character 1</option>
                    <option value="character2">Character 2</option>
                    <option value="Fred">Fred</option>
                </select>
                <button class="send-button" onclick="inWorldChat.send()">Send</button>
            </div>
        </div>
    </div>
*/
document.body.appendChild(chatTabDiv);


// Tab functionality
// Generated by ChatGPT, edited
function openTab(tabId) {
    // Hide all tab content
    const tabContents = document.querySelectorAll('.tab-content');
    tabContents.forEach(content => content.style.display = 'none');

    // Remove active class from all tab buttons
    const tabButtons = document.querySelectorAll('.tab-button');
    tabButtons.forEach(button => button.classList.remove('active'));

    // Show the selected tab content
    document.getElementById(tabId).style.display = 'flex';

    // Add active class to the clicked tab button
    document.querySelector(`.tab-button[onclick="openTab('${tabId}')"]`).classList.add('active');
}


const inWorldChat = {
    lastMessageSender: "",
    messages: [
        new chatComponent("system", "Chat exists!"),
        new chatComponent("header", "Greg"),
        new chatComponent("message", "Hi guys!"),
        new chatComponent("header", "Bob"),
        new chatComponent("message", "Hello Gregerick!"),
        new chatComponent("header", "Alice"),
        new chatComponent("message", "Ah this guy again."),
        new chatComponent("system", "Chat shuts up!"),
    ],

    internal: {
        textInput: document.getElementById("inWorldChatInput"),
        characterInput: document.getElementById("characterSelect"),
        messageArea: document.getElementById("inWorldChatMessages"),
        
        displaySystemMessage(text) {
            const message = document.createElement('div');
            message.className = 'system-message';
            message.textContent = text;
            this.messageArea.appendChild(message);
        },

        displayCharacterHeader(characterName) {
            const header = document.createElement('div');
            header.className = 'user-header';

            const img = document.createElement('img');
            img.src = pfpDictionary[characterName];
            img.alt = characterName;
            img.className = 'user-image';

            const name = document.createElement('span');
            name.className = 'user-name';
            name.textContent = characterName;

            header.appendChild(img);
            header.appendChild(name);

            this.messageArea.appendChild(header);
        },

        displayCharacterMessage(text) {
            const message = document.createElement('div');
            message.className = 'user-message';
            message.textContent = text;
            this.messageArea.appendChild(message);
        },

        addChatComponent(component) {
            if (component.type == "system") {
                this.displaySystemMessage(component.data);
                playerChat.lastMessageSender = "";
            }
            else if (component.type == "header") {
                this.displayCharacterHeader(component.data);
                playerChat.lastMessageSender = component.data;
            }
            else {
                this.displayCharacterMessage(component.data);
            }
        }
    },

    send() {
        let selectedCharacter = this.internal.characterInput.value
        
        if (this.lastMessageSender != selectedCharacter) {
            this.internal.displayCharacterHeader(selectedCharacter);
            this.messages.push(new chatComponent("header", selectedCharacter));
        }

        this.internal.displayCharacterMessage(this.internal.textInput.value);
        this.messages.push(new chatComponent("message", this.internal.textInput.value));

        this.internal.textInput.value = "";
        this.lastMessageSender = selectedCharacter;
    },

    sendSystemMessage(text) {
        this.internal.displaySystemMessage(text);
        this.messages.push(new chatComponent("system", text));

        this.lastMessageSender = "";
    },

    addCharacter(name) {
        character = document.createElement("option");
        character.value = character.innerHTML = character.id = name;
        this.internal.characterInput.add(character);
    }
}



inWorldChat.addCharacter("Bertha");

for (i of inWorldChat.messages) {
    inWorldChat.internal.addChatComponent(i);
}